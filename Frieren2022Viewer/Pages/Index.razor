@page "/"
@inject HttpClient Http

<PageTitle>フリーレン人気投票ツイート集計</PageTitle>

<h1>フリーレン人気投票ツイート集計</h1>

<p class="lead"><a href="https://websunday.net/frieren2022/" target="_blank">フリーレン人気投票</a>関連のツイートの収集結果です。</p>
<p>※<code>#ツイートと葬送のフリーレンフォローで10000票</code>のフォロー状態は未確認です。</p>

@if (votes == null)
{
    <p><em>Loading...</em></p>
}
<div>
    <BarChart @ref="totalChart" TItem="Vote" Options="@totalChartOptions" />
</div>
@if (viewPoints != null && viewPoints.Any())
{
    <div>
        <input type="range"
           style="width: 100%;"
           min="@(viewPoints.First().ViewPointTick)"
           max="@(viewPoints.Last().ViewPointTick)"
           step="@(60 * 60)"
           value="@viewPoint?.ViewPointTick"
           @onchange="@(e => ViewPointChanged(e.Value?.ToString() ?? ""))" />
        @if (viewPoint != null)
        {
            <br>
            <span>@viewPoint.Label</span>
        }
    </div>
}
@if (viewVotes != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>No.</th>
                <th>Date</th>
                <th>キャラクター</th>
                <th>票数</th>
            </tr>
        </thead>
        <tbody>
            @{
                var rank = 0;
            }
            @foreach (var v in viewVotes)
            {
                <tr>
                    <td class="text-end">@(++rank)</td>
                    <td>@v.Timestamp.LocalDateTime.ToString("yyyy/MM/dd")</td>
                    <td>@v.Target</td>
                    <td>@v.Count.ToString("0,0")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Vote[]? votes;
    private IList<Vote>? viewVotes;

    private IList<ViewPoint>? viewPoints;
    private ViewPoint? viewPoint;

    BarChart<Vote>? totalChart;
    private BarChartOptions totalChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "target",
                YAxisKey = "count",
            }
        };

    private List<Vote> ToTotal(IEnumerable<Vote> _votes)
    {
        return ToTotal(_votes, new ViewPoint
            {
                Timestamp = DateTimeOffset.MaxValue,
            });
    }

    private List<Vote> ToTotal(IEnumerable<Vote> _votes, ViewPoint _viewPoint)
    {
        return _votes
            .Where(x => x.Timestamp <= _viewPoint.Timestamp)
            .GroupBy(x => x.Target)
            .Select(x => new Vote
                {
                    Timestamp = x.Max(y => y.Timestamp),
                    Target = x.Key,
                    Count = x.Sum(y => y.Count)
                })
            .OrderByDescending(x => x.Count)
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        votes = await Http.GetFromJsonAsync<Vote[]>("votes.json");
        var maxDt = (votes ?? new Vote[] { }).Select(x => x.Timestamp).Max();
        viewPoints = (votes ?? new Vote[] { })
            .Select(x => x.Timestamp.LocalDateTime.Date)
            .Distinct()
            .Select(x => new ViewPoint
                {
                    Label = x.ToString("yyyy/MM/dd"),
                    Timestamp = x,
                })
            .Append(new ViewPoint
                {
                    Label = "最新",
                    Timestamp = new DateTimeOffset(maxDt.Ticks - (maxDt.Ticks % TimeSpan.TicksPerHour) + TimeSpan.TicksPerHour, maxDt.Offset),
                })
            .ToList();
        viewPoint = viewPoints.Last();
        HandleRedraw();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            HandleRedraw();
        }
    }

    private void ViewPointChanged(string v)
    {
        long tick;
        if (!long.TryParse(v, out tick)) { return; }

        var timestamp = new DateTimeOffset(tick * 1000 * 1000 * 10, DateTimeOffset.UtcNow.Offset);
        viewPoint = viewPoints?
            .FirstOrDefault(x => x.ViewPointTick == tick) ?? new ViewPoint
                {
                    Label = timestamp.LocalDateTime.ToString("yyyy/MM/dd HH:mm:ss"),
                    Timestamp = timestamp,
                };
        HandleRedraw();
    }

    private void HandleRedraw()
    {
        var _votes = viewPoint == null
            ? ToTotal(votes ?? new Vote[] { })
            : ToTotal(votes ?? new Vote[] { }, viewPoint);
        viewVotes = _votes;

        if (totalChart == null) { return; }
        totalChart.Clear();
        totalChart.AddDataSet(new BarChartDataset<Vote>()
            {
                Label = "総合",
                Data = _votes.Take(20).ToList(),
            });
    }

    public class Vote
    {
        public DateTimeOffset Timestamp { get; set; }
        public string? Target { get; set; }
        public int Count { get; set; }
    }

    public class ViewPoint
    {
        public DateTimeOffset Timestamp { get; set; }
        public string? Label { get; set; }

        public long ViewPointTick => (long)(Timestamp.UtcTicks / 1000 / 1000 / 10);
    }
}
