@page "/"
@inject HttpClient Http

<PageTitle>フリーレン人気投票ツイート集計</PageTitle>

<h1>フリーレン人気投票ツイート集計</h1>

<p><a href="https://websunday.net/frieren2022/" target="_blank">フリーレン人気投票</a>関連のツイートの収集結果です。</p>

@if (votes == null)
{
    <p><em>Loading...</em></p>
}
<BarChart @ref="totalChart" TItem="Vote" Options="@totalChartOptions" />

@if (viewVotes != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>No.</th>
                <th>Date</th>
                <th>キャラクター</th>
                <th>票数</th>
            </tr>
        </thead>
        <tbody>
            @{
                var rank = 0;
            }
            @foreach (var v in viewVotes)
            {
                <tr>
                    <td class="text-end">@(++rank)</td>
                    <td>@v.Timestamp.ToString("yyyy/MM/dd")</td>
                    <td>@v.Target</td>
                    <td>@v.Count.ToString("0,0")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Vote[]? votes;
    private IList<Vote>? viewVotes;

    BarChart<Vote> totalChart;
    private BarChartOptions totalChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "target",
                YAxisKey = "count",
            }
        };

    private List<Vote> ToTotal(IEnumerable<Vote> _votes)
    {
        return _votes
            .GroupBy(x => x.Target)
            .Select(x => new Vote
                {
                    Timestamp = x.Max(y => y.Timestamp),
                    Target = x.Key,
                    Count = x.Sum(y => y.Count)
                })
            .OrderByDescending(x => x.Count)
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        votes = await Http.GetFromJsonAsync<Vote[]>("votes.json");
        HandleRedraw();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HandleRedraw();
        }
    }

    private void HandleRedraw()
    {
        var _votes = ToTotal(votes ?? new Vote[] { });
        viewVotes = _votes;

        if (totalChart == null) { return; }
        totalChart.Clear();
        totalChart.AddDataSet(new BarChartDataset<Vote>()
            {
                Label = "総合",
                Data = _votes,
            });
    }

    public class Vote
    {
        public DateTimeOffset Timestamp { get; set; }
        public string? Target { get; set; }
        public int Count { get; set; }
    }
}
